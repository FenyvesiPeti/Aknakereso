var gameStartTime;
var timerId;
var timerStarted = false;
var gameOver = false; // J√°t√©k √°llapot√°nak nyomon k√∂vet√©s√©re
var safeCellsRevealed = 0; // Nyilv√°ntartjuk, hogy h√°ny biztons√°gos cell√°t fedeztek fel
var totalSafeCells = cols * rows - osszesAkna; // Az √∂sszes biztons√°gos cella sz√°m√≠t√°sa


//2 dimenzi√≥s t√∂mb, amiben elt√°roljuk az osszes cell√°t (grid)
function create2DArray(cols, rows){ 
    var arr = new Array(cols); //minden oszlopra 
    for(var i = 0; i < arr.length; i++){
        arr[i] = new Array(rows); //gener√°lunk egy sort
    }
    return arr; //Visszah√≠vjuk
}

var grid;
var cols;
var rows;
var w = 30; //30pixel x 30pixel m√©ret≈± n√©gyzet (cella)

var canvasWidth = 630;
var canvasHeight = 510;

var osszesAkna = 30; //Akn√°k sz√°ma
var aknaSzam = osszesAkna; //Elt√°roljuk egy m√°sik v√°ltoz√≥ban hogy mennyi akna van m√©g h√°tra

//Maga a t√°bla elk√©sz√≠t√©se
function setup(){
    let canvas = createCanvas(canvasWidth, canvasHeight); //Canvas gener√°l√°sa (oszlopok + w, sorok + w)
    canvas.id('Canvas'); //Adunk neki egy ID-t
    canvas.parent('canvasPosition'); //Megadjuk a canvas hely√©t
    canvas = document.getElementById('Canvas'); //hogy letudjuk tiltani a jobb klikk "men√ºt" amikor a t√°bl√°ban kattintunk
        canvas.addEventListener('contextmenu', function(event) {
            event.preventDefault();
        });
    cols = floor(width / w); //Kisz√°moljuk az oszlopok m√©ret√©t (floor hogy eg√©sz sz√°m legyen)
    rows = floor(height / w); //Kisz√°moljuk a sorok m√©ret√©t (floor hogy eg√©sz sz√°m legyen)
    grid = create2DArray(cols, rows);
    for (var i = 0; i< cols; i++){ //Minden oszlopra 
        for (var j = 0; j< rows; j++){ //√âs minden sorra csin√°lunk egy cell√°t
            grid[i][j] = new Cell(i, j, w); //Legener√°ljuk a cell√°kat, √©s elt√°roljuk az index√©t hogy hol van a 2dimenzi√≥s t√∂mben hol van. (pl:grid[1][3] = 1. oszlop 3. sora)
        }
    }
    //Kiv√°lasztjuk az osszesAkna hely√©t
    var options = [];
    //K√©sz√≠t√ºnk egy ciklust ahol elt√°roljuk az √∂sszes cell√°t egy t√∂mbben
    for(var i = 0; i < cols; i++){
        for(var j = 0; j < rows; j++){
            options.push([i, j]);
        }
    }

    // Egy ciklus ami elhelyezi az akn√°kat
    for( var n = 0; n < osszesAkna; n++){
        var index = floor(random(options.length)); //√âs az elt√°rololt cell√°kb√≥l random kiv√°lasztunk egyet ahol lesz az akna
        var choice = options[index];
        var i = choice[0];
        var j = choice[1];
        options.splice(index, 1); //Kit√∂rli az indexet a t√∂mb√∂kb≈ël, √≠gy nem lehet ugyanazon a helyen 2 akna (nem lehet √∫jra opci√≥)
        grid[i][j].akna = true;
    }

    // Egy k√ºl√∂n for ciklus ami megsz√°molja
    for (var i = 0; i< cols; i++){ 
        for (var j = 0; j< rows; j++){ 
            grid[i][j].countAknak();
        }
    }

    document.getElementById("remainingMines").innerText = aknaSzam + "üí£";; //Ki√≠rjuk hogy mennyi akna van h√°tra (m√©g nem m≈±k√∂dik rendesen)
    document.getElementById("resetButton").addEventListener("click", function(){ //Egy gomb ami reseteli a j√°t√©kot
        resetGame();
    });
}

//Egy funkci√≥ ami n√©zi az eg√©rkattint√°sokat
function mousePressed() {
    let cellClicked = false; // Tegy√ºk fel, hogy nem t√∂rt√©nt cell√°ra kattint√°s
    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            if (grid[i][j].contains(mouseX, mouseY)) { // Ha a kattint√°s egy cell√°t √©rint
                cellClicked = true; // Jel√∂lj√ºk, hogy t√∂rt√©nt cell√°ra kattint√°s
                if (!timerStarted && !gameOver) {
                    gameStartTime = new Date();
                    timerId = setInterval(updateTimer, 1000);
                    timerStarted = true;
                }

                // A cell√°val kapcsolatos t√∂bbi m≈±velet...
                if(mouseButton === LEFT) {
                    if(!grid[i][j].revealed && !grid[i][j].flagged) {
                        grid[i][j].reveal(); // Felfedezz√ºk a cell√°t
                    }
                } else if (mouseButton === RIGHT) {
                    if (!grid[i][j].revealed) { //Ha egy mez≈ë m√©g nincs felfedezve
                        if (!grid[i][j].flagged) {
                            grid[i][j].toggleFlag(); //akkor megflaggelj√ºk
                            decreaseMineCount(); //Megh√≠vjuk ezt a f√ºggv√©nyt
                        } else {
                            grid[i][j].toggleFlag(); 
                            increaseMineCount(); //Megh√≠vjuk ezt a f√ºggv√©nyt
                        }
                    }
                }

                return; // Kil√©p√ºnk a funkci√≥b√≥l, mivel m√°r kezelt√ºk a kattint√°st
            }
        }
    }
}

function increaseMineCount(){ //N√∂veli az aknaSzam-ot 1-el
    if (aknaSzam > 0){ //ha t√∂bb mint 0 (nem lehet negat√≠v √©rt√©k)
        aknaSzam++;
        document.getElementById("remainingMines").innerText = aknaSzam + "üí£";
    }
}

function decreaseMineCount(){ //Cs√∂kkenti az aknaSzam-ot 1-el
    if (aknaSzam > 0){ //ha t√∂bb mint 0 (nem lehet negat√≠v √©rt√©k)
        aknaSzam--;
        document.getElementById("remainingMines").innerText = aknaSzam + "üí£";
    }
}

//Megrajzoljuk mag√°t a "t√°bl√°t"
function draw(){
    background(255, 255, 255); 
    for (var i = 0; i < cols; i++){
        for (var j = 0; j< rows; j++){
            grid[i][j].show(); //Kirajzoljuk
        }
    }
}

function resetGame(){
    // Minden cell√°t vissza√°ll√≠tunk felfedezetlen √°llapotba
    for (var i = 0; i < cols; i++) { 
        for (var j = 0; j < rows; j++) { 
            grid[i][j].revealed = false; //Minden cella felfedezetlen √°llapotba vissza
            grid[i][j].akna = false; //Az √∂sszes akn√°t elt√°vol√≠tjuk
            grid[i][j].flagged = false; //Az √∂sszes cell√°t ami flaggelt elt√°vol√≠tjuk
        }
    }
    gameOver = false;
    //location.reload(); //√öjrat√∂lti az oldalt (am√≠g nincs fixelve)

    grid = create2DArray(cols, rows);
    for (var i = 0; i< cols; i++){ //Minden oszlopra 
        for (var j = 0; j< rows; j++){ //√âs minden sorra csin√°lunk egy cell√°t
            grid[i][j] = new Cell(i, j, w); //Legener√°ljuk a cell√°kat, √©s elt√°roljuk az index√©t hogy hol van a 2dimenzi√≥s t√∂mben hol van. (pl:grid[1][3] = 1. oszlop 3. sora)
        }
    }
    // √öjra elhelyezz√ºk az akn√°kat
    var options = [];
    //K√©sz√≠t√ºnk egy ciklust ahol elt√°roljuk az √∂sszes cell√°t egy t√∂mbben
    for(var i = 0; i < cols; i++){
        for(var j = 0; j < rows; j++){
            options.push([i, j]);
        }
    }

    // Egy ciklus ami elhelyezi az akn√°kat
    for( var n = 0; n < osszesAkna; n++){
        var index = floor(random(options.length)); //√âs az elt√°rololt cell√°kb√≥l random kiv√°lasztunk egyet ahol lesz az akna
        var choice = options[index];
        var i = choice[0];
        var j = choice[1];
        options.splice(index, 1); //Kit√∂rli az indexet a t√∂mb√∂kb≈ël, √≠gy nem lehet ugyanazon a helyen 2 akna (nem lehet √∫jra opci√≥)
        grid[i][j].akna = true;
    }
    // Egy k√ºl√∂n for ciklus ami megsz√°molja
    for (var i = 0; i< cols; i++){ 
        for (var j = 0; j< rows; j++){ 
            grid[i][j].countAknak();
        }
    }
    // Friss√≠tj√ºk az akn√°k sz√°m√°t megjelen√≠t≈ë elemet
    aknaSzam = osszesAkna; // Az akn√°k sz√°m√°t is vissza√°ll√≠tjuk az eredeti √©rt√©k√©re
    document.getElementById("remainingMines").innerText = aknaSzam + "üí£";
}

function updateTimer() {
    var now = new Date();
    var elapsed = new Date(now - gameStartTime);
    var minutes = elapsed.getUTCMinutes();
    var seconds = elapsed.getUTCSeconds();

    // Form√°tum: "xx:xx"
    var formattedTime = (minutes < 10 ? '0' : '') + minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
    document.getElementById("elapsedTime").innerText = formattedTime;
}

function revealAllBombs() {
    for (var i = 0; i < cols; i++) {
        for (var j = 0; j < rows; j++) {
            if (grid[i][j].akna) { // Ha a cella bomb√°t tartalmaz
                grid[i][j].revealed = true; // Felfedj√ºk a bomb√°t
            }
        }
    }
}
